"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –≤–∏–¥—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import time
import threading
from typing import Set, Optional, Dict, Any
from dataclasses import dataclass
from .types import Position, NodeID
from loguru import logger


@dataclass
class CreationRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã"""
    class_name: str
    position: Position
    timestamp: float
    thread_id: int
    
    def __hash__(self):
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        return hash((
            self.class_name,
            self.position.x,  # Position —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç int –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            self.position.y,
            round(self.timestamp, 1)  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 100ms
        ))


class SafeNodeCreationManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –≤–∏–¥—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self):
        self._active_requests: Set[CreationRequest] = set()
        self._processing_requests: Set[CreationRequest] = set()
        self._completed_requests: Dict[int, CreationRequest] = {}
        self._lock = threading.RLock()
        self._creation_timeout = 5.0  # —Å–µ–∫—É–Ω–¥
        self._ui_sync_in_progress = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self._stats = {
            'total_requests': 0,
            'duplicate_blocked': 0,
            'timeout_cleaned': 0,
            'successful_created': 0
        }
    
    def request_node_creation(self, class_name: str, position: Position) -> Optional['CreationRequest']:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ —ç—Ç–æ –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
        """
        with self._lock:
            request = CreationRequest(
                class_name=class_name,
                position=position,
                timestamp=time.time(),
                thread_id=threading.get_ident()
            )
            
            self._stats['total_requests'] += 1
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self._cleanup_old_requests()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if self._is_duplicate_request(request):
                self._stats['duplicate_blocked'] += 1
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å: {class_name} at ({position.x}, {position.y})")
                return None
            
            # –ï—Å–ª–∏ UI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
            if self._ui_sync_in_progress:
                logger.warning(f"‚è≥ UI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ: {class_name}")
                return None
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            self._active_requests.add(request)
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å: {class_name} at ({position.x}, {position.y})")
            
            return request
    
    def begin_processing(self, request: CreationRequest) -> bool:
        """
        –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω
        """
        with self._lock:
            if request not in self._active_requests:
                logger.warning(f"üö´ –ó–∞–ø—Ä–æ—Å –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω: {request.class_name}")
                return False
            
            self._active_requests.remove(request)
            self._processing_requests.add(request)
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: {request.class_name}")
            
            return True
    
    def complete_processing(self, request: CreationRequest, node_id: NodeID) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
        with self._lock:
            if request in self._processing_requests:
                self._processing_requests.remove(request)
                self._completed_requests[hash(request)] = request
                self._stats['successful_created'] += 1
                logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ: {request.class_name} -> {node_id}")
    
    def fail_processing(self, request: CreationRequest, error: str) -> None:
        """–ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π"""
        with self._lock:
            if request in self._processing_requests:
                self._processing_requests.remove(request)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {request.class_name} - {error}")
    
    def set_ui_sync_state(self, in_progress: bool) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        with self._lock:
            old_state = self._ui_sync_in_progress
            self._ui_sync_in_progress = in_progress
            
            if old_state != in_progress:
                state_name = "–Ω–∞—á–∞—Ç–∞" if in_progress else "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                logger.info(f"üîÑ UI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {state_name}")
    
    def _is_duplicate_request(self, request: CreationRequest) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º"""
        request_hash = hash(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for active_req in self._active_requests:
            if hash(active_req) == request_hash:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for processing_req in self._processing_requests:
            if hash(processing_req) == request_hash:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if request_hash in self._completed_requests:
            completed_req = self._completed_requests[request_hash]
            if time.time() - completed_req.timestamp < 1.0:  # –í —Ç–µ—á–µ–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã
                return True
        
        return False
    
    def _cleanup_old_requests(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ timeout
        expired_active = {
            req for req in self._active_requests 
            if current_time - req.timestamp > self._creation_timeout
        }
        
        for req in expired_active:
            self._active_requests.remove(req)
            self._stats['timeout_cleaned'] += 1
            logger.warning(f"üóëÔ∏è –û—á–∏—â–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {req.class_name}")
        
        # –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ timeout
        expired_processing = {
            req for req in self._processing_requests 
            if current_time - req.timestamp > self._creation_timeout
        }
        
        for req in expired_processing:
            self._processing_requests.remove(req)
            logger.error(f"üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä–≤–∞–Ω –∑–∞–ø—Ä–æ—Å: {req.class_name}")
        
        # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥
        expired_completed = [
            req_hash for req_hash, req in self._completed_requests.items()
            if current_time - req.timestamp > 10.0
        ]
        
        for req_hash in expired_completed:
            del self._completed_requests[req_hash]
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã"""
        with self._lock:
            return {
                **self._stats,
                'active_requests': len(self._active_requests),
                'processing_requests': len(self._processing_requests),
                'completed_requests': len(self._completed_requests),
                'ui_sync_in_progress': self._ui_sync_in_progress
            }
    
    def reset_stats(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self._lock:
            self._stats = {
                'total_requests': 0,
                'duplicate_blocked': 0,
                'timeout_cleaned': 0,
                'successful_created': 0
            }
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_safe_creation_manager = None


def get_safe_creation_manager() -> SafeNodeCreationManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
    global _safe_creation_manager
    if _safe_creation_manager is None:
        _safe_creation_manager = SafeNodeCreationManager()
    return _safe_creation_manager