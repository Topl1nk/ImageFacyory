"""
–°–ò–°–¢–ï–ú–ê –ó–ê–ü–ò–°–ò –ò –ü–†–û–í–ï–†–ö–ò –î–ï–ú–û
–§–∏–ª–æ—Å–æ—Ñ–∏—è: "–ó–∞–∫–æ–Ω—ã –ø–∏—à—É—Ç—Å—è –Ω–∞ –∫—Ä–æ–≤–∏, –Ω–æ –º—ã –ø–∏—à–µ–º –∏—Ö –î–û –ø—Ä–æ–ª–∏—Ç–∏—è –∫—Ä–æ–≤–∏"

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ "–¥–µ–º–æ" (–∫–∞–∫ –≤ –∏–≥—Ä–∞—Ö),
–∑–∞—Ç–µ–º –º–æ–∂–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —ç—Ç–æ –¥–µ–º–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –î–û –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è.
"""

import json
import time
import threading
from dataclasses import dataclass, asdict
from typing import List, Dict, Any, Optional, Callable
from pathlib import Path
from enum import Enum
from uuid import uuid4

from loguru import logger
from PySide6.QtCore import QObject, Signal, QPoint, QPointF
from PySide6.QtGui import QMouseEvent, QKeyEvent, QWheelEvent

from .types import Position, NodeID, PinID, ConnectionID


class ActionType(Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
    MOUSE_CLICK = "mouse_click"
    MOUSE_MOVE = "mouse_move"
    MOUSE_WHEEL = "mouse_wheel"
    KEY_PRESS = "key_press"
    KEY_RELEASE = "key_release"
    NODE_CREATE = "node_create"
    NODE_DELETE = "node_delete"
    NODE_MOVE = "node_move"
    CONNECTION_CREATE = "connection_create"
    CONNECTION_DELETE = "connection_delete"
    CONTEXT_MENU = "context_menu"
    UI_CHANGE = "ui_change"
    SYSTEM_STATE = "system_state"


class ExpectedOutcome(Enum):
    """–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π"""
    SUCCESS = "success"
    FAILURE = "failure"
    NO_CHANGE = "no_change"
    SPECIFIC_STATE = "specific_state"


@dataclass
class DemoAction:
    """–û–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –¥–µ–º–æ –∑–∞–ø–∏—Å–∏"""
    id: str
    timestamp: float
    action_type: ActionType
    data: Dict[str, Any]
    expected_outcome: ExpectedOutcome
    expected_state: Dict[str, Any]
    actual_outcome: Optional[ExpectedOutcome] = None
    actual_state: Optional[Dict[str, Any]] = None
    success: Optional[bool] = None
    error_message: Optional[str] = None


@dataclass
class SystemSnapshot:
    """–°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"""
    timestamp: float
    nodes_count: int
    connections_count: int
    scene_items_count: int
    selected_items: List[str]
    ui_state: Dict[str, Any]
    memory_usage: Optional[int] = None
    performance_metrics: Optional[Dict[str, float]] = None


class ProphiticRule:
    """–ü—Ä–æ—Ñ–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ - –∑–∞–∫–æ–Ω, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –î–û –ø—Ä–æ–±–ª–µ–º—ã"""
    
    def __init__(self, name: str, description: str, check_function: Callable, 
                 severity: str = "warning", auto_fix: Optional[Callable] = None):
        self.name = name
        self.description = description
        self.check_function = check_function
        self.severity = severity  # "critical", "warning", "info"
        self.auto_fix = auto_fix
        self.violation_count = 0
        self.last_violation = None
    
    def check(self, demo_action: DemoAction, system_state: SystemSnapshot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"""
        try:
            violation = self.check_function(demo_action, system_state)
            if violation:
                self.violation_count += 1
                self.last_violation = time.time()
                logger.warning(f"üö® –ü—Ä–∞–≤–∏–ª–æ –Ω–∞—Ä—É—à–µ–Ω–æ: {self.name} - {self.description}")
                
                if self.auto_fix:
                    logger.info(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {self.name}")
                    self.auto_fix(demo_action, system_state)
                
                return False
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∏–ª–∞ {self.name}: {e}")
            return False


class DemoRecorder(QObject):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–µ–º–æ —Ñ–∞–π–ª"""
    
    action_recorded = Signal(DemoAction)
    
    def __init__(self):
        super().__init__()
        self.recording = False
        self.current_demo: List[DemoAction] = []
        self.start_time = 0
        self.demo_name = ""
        
    def start_recording(self, demo_name: str) -> None:
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–µ–º–æ"""
        self.demo_name = demo_name
        self.current_demo = []
        self.start_time = time.time()
        self.recording = True
        logger.info(f"üé¨ –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å –¥–µ–º–æ: {demo_name}")
    
    def stop_recording(self) -> List[DemoAction]:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –¥–µ–º–æ"""
        self.recording = False
        logger.info(f"‚èπÔ∏è –ó–∞–ø–∏—Å—å –¥–µ–º–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.demo_name} ({len(self.current_demo)} –¥–µ–π—Å—Ç–≤–∏–π)")
        return self.current_demo.copy()
    
    def record_action(self, action_type: ActionType, data: Dict[str, Any], 
                     expected_outcome: ExpectedOutcome = ExpectedOutcome.SUCCESS,
                     expected_state: Dict[str, Any] = None) -> None:
        """–ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
        if not self.recording:
            return
            
        action = DemoAction(
            id=str(uuid4()),
            timestamp=time.time() - self.start_time,
            action_type=action_type,
            data=data,
            expected_outcome=expected_outcome,
            expected_state=expected_state or {}
        )
        
        self.current_demo.append(action)
        self.action_recorded.emit(action)
        logger.debug(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action_type.value}")


class DemoPlayer:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –¥–µ–º–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    
    def __init__(self, application):
        self.app = application
        self.current_demo: List[DemoAction] = []
        self.playing = False
        self.current_action_index = 0
        
    def load_demo(self, demo_path: Path) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(demo_path, 'r', encoding='utf-8') as f:
                demo_data = json.load(f)
                
            self.current_demo = []
            for action_data in demo_data.get('actions', []):
                action = DemoAction(
                    id=action_data['id'],
                    timestamp=action_data['timestamp'],
                    action_type=ActionType(action_data['action_type']),
                    data=action_data['data'],
                    expected_outcome=ExpectedOutcome(action_data['expected_outcome']),
                    expected_state=action_data['expected_state']
                )
                self.current_demo.append(action)
            
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–µ–º–æ: {demo_path} ({len(self.current_demo)} –¥–µ–π—Å—Ç–≤–∏–π)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ {demo_path}: {e}")
            return False
    
    def play_demo(self, verify_each_step: bool = True) -> Dict[str, Any]:
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –¥–µ–º–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        if not self.current_demo:
            return {"success": False, "error": "–î–µ–º–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"}
        
        self.playing = True
        self.current_action_index = 0
        
        results = {
            "success": True,
            "total_actions": len(self.current_demo),
            "successful_actions": 0,
            "failed_actions": 0,
            "errors": [],
            "performance": {}
        }
        
        start_time = time.time()
        
        try:
            for i, action in enumerate(self.current_demo):
                if not self.playing:
                    break
                    
                self.current_action_index = i
                logger.info(f"üéÆ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è {i+1}/{len(self.current_demo)}: {action.action_type.value}")
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–µ
                success = self._execute_action(action)
                
                if success:
                    results["successful_actions"] += 1
                    action.success = True
                else:
                    results["failed_actions"] += 1
                    action.success = False
                    results["errors"].append({
                        "action_index": i,
                        "action_type": action.action_type.value,
                        "error": action.error_message
                    })
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                if verify_each_step:
                    self._verify_system_state(action)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                time.sleep(0.1)
        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –¥–µ–º–æ: {e}")
            results["success"] = False
            results["errors"].append({"critical_error": str(e)})
        
        finally:
            self.playing = False
            results["performance"]["total_time"] = time.time() - start_time
            results["performance"]["actions_per_second"] = len(self.current_demo) / results["performance"]["total_time"]
        
        logger.info(f"üéØ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {results['successful_actions']}/{results['total_actions']} —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
        return results
    
    def _execute_action(self, action: DemoAction) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ"""
        try:
            if action.action_type == ActionType.NODE_CREATE:
                return self._execute_node_create(action)
            elif action.action_type == ActionType.CONNECTION_CREATE:
                return self._execute_connection_create(action)
            elif action.action_type == ActionType.MOUSE_CLICK:
                return self._execute_mouse_click(action)
            elif action.action_type == ActionType.CONTEXT_MENU:
                return self._execute_context_menu(action)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action.action_type}")
                return False
                
        except Exception as e:
            action.error_message = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action.action_type}: {e}")
            return False
    
    def _execute_node_create(self, action: DemoAction) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã"""
        try:
            class_name = action.data.get('class_name')
            position = action.data.get('position', {})
            pos = Position(position.get('x', 0), position.get('y', 0))
            
            # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –Ω–æ–¥—ã –¥–æ
            nodes_before = len(self.app.graph.nodes)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–¥—É
            node = self.app.create_node(class_name)
            node.position = pos
            self.app.graph.add_node(node)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            nodes_after = len(self.app.graph.nodes)
            created_count = nodes_after - nodes_before
            
            action.actual_state = {
                "nodes_before": nodes_before,
                "nodes_after": nodes_after,
                "created_count": created_count
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
            expected_count = action.expected_state.get('expected_nodes_created', 1)
            if created_count == expected_count:
                action.actual_outcome = ExpectedOutcome.SUCCESS
                return True
            else:
                action.actual_outcome = ExpectedOutcome.FAILURE
                action.error_message = f"–°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–¥, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}"
                return False
                
        except Exception as e:
            action.error_message = str(e)
            return False
    
    def _execute_connection_create(self, action: DemoAction) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            output_node_id = action.data.get('output_node_id')
            output_pin_name = action.data.get('output_pin_name')
            input_node_id = action.data.get('input_node_id')
            input_pin_name = action.data.get('input_pin_name')
            
            # –ù–∞–π—Ç–∏ –Ω–æ–¥—ã
            output_node = None
            input_node = None
            
            for node in self.app.graph.nodes:
                if node.id == output_node_id:
                    output_node = node
                elif node.id == input_node_id:
                    input_node = node
            
            if not output_node or not input_node:
                action.error_message = "–ù–æ–¥—ã –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                return False
            
            # –ù–∞–π—Ç–∏ –ø–∏–Ω—ã
            output_pin = output_node.get_output_pin(output_pin_name)
            input_pin = input_node.get_input_pin(input_pin_name)
            
            if not output_pin or not input_pin:
                action.error_message = "–ü–∏–Ω—ã –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                return False
            
            # –°–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            connections_before = len(self.app.graph.connections)
            connection = self.app.graph.connect_pins(output_pin, input_pin)
            connections_after = len(self.app.graph.connections)
            
            action.actual_state = {
                "connections_before": connections_before,
                "connections_after": connections_after,
                "connection_created": connection is not None
            }
            
            if connection:
                action.actual_outcome = ExpectedOutcome.SUCCESS
                return True
            else:
                action.actual_outcome = ExpectedOutcome.FAILURE
                action.error_message = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ"
                return False
                
        except Exception as e:
            action.error_message = str(e)
            return False
    
    def _execute_mouse_click(self, action: DemoAction) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –º—ã—à–∏"""
        # –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        pos = action.data.get('position', {})
        button = action.data.get('button', 'left')
        logger.debug(f"üñ±Ô∏è –ö–ª–∏–∫ –º—ã—à–∏: {button} –∫–Ω–æ–ø–∫–∞ –≤ ({pos.get('x', 0)}, {pos.get('y', 0)})")
        return True
    
    def _execute_context_menu(self, action: DemoAction) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu_action = action.data.get('menu_action')
        logger.debug(f"üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é: {menu_action}")
        return True
    
    def _verify_system_state(self, action: DemoAction) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        current_state = self._capture_system_state()
        
        # –°—Ä–∞–≤–Ω–∏—Ç—å —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        expected = action.expected_state
        for key, expected_value in expected.items():
            actual_value = current_state.get(key)
            if actual_value != expected_value:
                logger.warning(f"‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º: {key} = {actual_value}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_value}")
    
    def _capture_system_state(self) -> Dict[str, Any]:
        """–ó–∞—Ö–≤–∞—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "nodes_count": len(self.app.graph.nodes),
            "connections_count": len(self.app.graph.connections),
            "timestamp": time.time()
        }


class PropheticRulesEngine:
    """–î–≤–∏–∂–æ–∫ –ø—Ä–æ—Ñ–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª - –ø–∏—à–µ—Ç –∑–∞–∫–æ–Ω—ã –î–û –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self):
        self.rules: List[ProphiticRule] = []
        self.violations_log: List[Dict[str, Any]] = []
        self._setup_default_rules()
    
    def _setup_default_rules(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        # –ü—Ä–∞–≤–∏–ª–æ: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–¥
        def check_node_duplication(action: DemoAction, state: SystemSnapshot) -> bool:
            if action.action_type == ActionType.NODE_CREATE:
                actual_created = action.actual_state.get('created_count', 1) if action.actual_state else 1
                return actual_created > 1
            return False
        
        self.add_rule(ProphiticRule(
            name="no_node_duplication",
            description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—é",
            check_function=check_node_duplication,
            severity="critical"
        ))
        
        # –ü—Ä–∞–≤–∏–ª–æ: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        def check_performance(action: DemoAction, state: SystemSnapshot) -> bool:
            if state.performance_metrics:
                response_time = state.performance_metrics.get('response_time', 0)
                return response_time > 1.0  # –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω—è–ª–æ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
            return False
        
        self.add_rule(ProphiticRule(
            name="performance_threshold",
            description="–î–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (< 1 —Å–µ–∫)",
            check_function=check_performance,
            severity="warning"
        ))
        
        # –ü—Ä–∞–≤–∏–ª–æ: –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
        def check_memory_leak(action: DemoAction, state: SystemSnapshot) -> bool:
            if state.memory_usage and hasattr(self, '_previous_memory'):
                memory_growth = state.memory_usage - self._previous_memory
                return memory_growth > 50 * 1024 * 1024  # –†–æ—Å—Ç –±–æ–ª—å—à–µ 50MB
            self._previous_memory = state.memory_usage or 0
            return False
        
        self.add_rule(ProphiticRule(
            name="memory_leak_prevention",
            description="–ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏",
            check_function=check_memory_leak,
            severity="critical"
        ))
    
    def add_rule(self, rule: ProphiticRule) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ"""
        self.rules.append(rule)
        logger.info(f"üìú –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Ñ–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ: {rule.name}")
    
    def check_all_rules(self, action: DemoAction, state: SystemSnapshot) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞"""
        results = {
            "total_rules": len(self.rules),
            "passed": 0,
            "failed": 0,
            "violations": []
        }
        
        for rule in self.rules:
            try:
                violation = rule.check(action, state)
                if violation:
                    results["failed"] += 1
                    violation_record = {
                        "rule": rule.name,
                        "severity": rule.severity,
                        "description": rule.description,
                        "timestamp": time.time(),
                        "action_type": action.action_type.value
                    }
                    results["violations"].append(violation_record)
                    self.violations_log.append(violation_record)
                else:
                    results["passed"] += 1
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∏–ª–∞ {rule.name}: {e}")
                results["failed"] += 1
        
        return results


class DemoSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    def __init__(self, application):
        self.app = application
        self.recorder = DemoRecorder()
        self.player = DemoPlayer(application)
        self.rules_engine = PropheticRulesEngine()
        self.demos_dir = Path("demos")
        self.demos_dir.mkdir(exist_ok=True)
    
    def start_recording(self, demo_name: str) -> None:
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –¥–µ–º–æ"""
        self.recorder.start_recording(demo_name)
    
    def stop_recording_and_save(self) -> Path:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–º–æ"""
        actions = self.recorder.stop_recording()
        demo_path = self.save_demo(self.recorder.demo_name, actions)
        return demo_path
    
    def save_demo(self, name: str, actions: List[DemoAction]) -> Path:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–º–æ –≤ —Ñ–∞–π–ª"""
        demo_path = self.demos_dir / f"{name}.json"
        
        demo_data = {
            "name": name,
            "created_at": time.time(),
            "actions_count": len(actions),
            "actions": [asdict(action) for action in actions]
        }
        
        with open(demo_path, 'w', encoding='utf-8') as f:
            json.dump(demo_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ –î–µ–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {demo_path}")
        return demo_path
    
    def play_demo_and_verify(self, demo_path: Path) -> Dict[str, Any]:
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –¥–µ–º–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞"""
        if not self.player.load_demo(demo_path):
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ"}
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –¥–µ–º–æ
        play_results = self.player.play_demo(verify_each_step=True)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        rules_results = []
        for action in self.player.current_demo:
            if action.actual_state:
                state = SystemSnapshot(
                    timestamp=action.timestamp,
                    nodes_count=action.actual_state.get('nodes_after', 0),
                    connections_count=action.actual_state.get('connections_after', 0),
                    scene_items_count=0,
                    selected_items=[],
                    ui_state={}
                )
                rule_check = self.rules_engine.check_all_rules(action, state)
                rules_results.append(rule_check)
        
        # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        combined_results = {
            **play_results,
            "rules_check": rules_results,
            "total_violations": sum(r["failed"] for r in rules_results),
            "demo_path": str(demo_path)
        }
        
        return combined_results
    
    def record_action(self, action_type: ActionType, data: Dict[str, Any], 
                     expected_outcome: ExpectedOutcome = ExpectedOutcome.SUCCESS,
                     expected_state: Dict[str, Any] = None) -> None:
        """–ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å UI)"""
        self.recorder.record_action(action_type, data, expected_outcome, expected_state)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –¥–µ–º–æ
_demo_system = None


def get_demo_system(application=None):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –¥–µ–º–æ"""
    global _demo_system
    if _demo_system is None and application:
        _demo_system = DemoSystem(application)
    return _demo_system