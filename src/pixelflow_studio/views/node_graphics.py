"""
Graphics items for node editor.
"""

from __future__ import annotations

from typing import Optional, List, Dict, Any
from PIL import Image
from PySide6.QtCore import Qt, QRectF, QPointF, Signal, QPropertyAnimation, QEasingCurve, QObject
from PySide6.QtGui import (
    QPainter, QPen, QBrush, QColor, QFont, QFontMetrics, QPainterPath, QLinearGradient,
    QMouseEvent, QHoverEvent, QDragEnterEvent, QDropEvent, QRadialGradient
)
from PySide6.QtWidgets import (
    QGraphicsItem, QGraphicsRectItem, QGraphicsTextItem, QGraphicsEllipseItem,
    QGraphicsPathItem, QGraphicsDropShadowEffect, QStyleOptionGraphicsItem,
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QSpinBox, QDoubleSpinBox,
    QComboBox, QCheckBox, QSlider, QGraphicsProxyWidget, QStyle
)

from ..core.types import NodeID, PinID, PinType, Position
from ..core.node import Node, Pin


class NodeGraphicsItem(QGraphicsRectItem):
    """
    –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–ê–Ø –Ω–æ–¥–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –≤ —Å—Ç–∏–ª–µ —Ç–æ–ø–æ–≤—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤.
    """
    
    def __init__(self, node: Node, editor_view):
        super().__init__()
        self.node = node
        self.editor_view = editor_view
        self.node_id: Optional[NodeID] = node.id
        
        # üé® –°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –¶–í–ï–¢–û–í–ê–Ø –ü–ê–õ–ò–¢–†–ê (GitHub Copilot / JetBrains style)
        self.colors = {
            'background': QColor(42, 45, 51),       # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π –æ—Å–Ω–æ–≤–∞
            'background_selected': QColor(52, 55, 61),  # –°–≤–µ—Ç–ª–µ–µ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
            'border': QColor(78, 84, 92),           # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            'border_selected': QColor(0, 122, 255), # –°–∏–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç
            'title_bg': QColor(32, 35, 41),         # –¢–µ–º–Ω–µ–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            'title_bg_selected': QColor(0, 102, 204), # –°–∏–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
            'text': QColor(248, 248, 242),          # –ü–æ—á—Ç–∏ –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            'text_secondary': QColor(166, 176, 187), # –°–µ—Ä—ã–π –¥–ª—è –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ
            'shadow': QColor(0, 0, 0, 80),          # –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∞—è —Ç–µ–Ω—å
            'hover_overlay': QColor(255, 255, 255, 15), # –¢–æ–Ω–∫–∏–π hover —ç—Ñ—Ñ–µ–∫—Ç
        }
        
        # üìê –¢–û–ß–ù–´–ï –†–ê–ó–ú–ï–†–´ –ò –û–¢–°–¢–£–ü–´
        self.metrics = {
            'corner_radius': 6,        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
            'title_height': 32,        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            'padding': 12,             # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
            'pin_size': 7,             # –†–∞–∑–º–µ—Ä –ø–∏–Ω–æ–≤
            'pin_spacing': 22,         # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–∏–Ω–∞–º–∏
            'min_width': 160,          # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            'border_width': 1.2,       # –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            'selected_border_width': 2, # –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
        }
        
        # üéØ –°–û–°–¢–û–Ø–ù–ò–Ø
        self.is_hovered = False
        self.animation_progress = 0.0
        
        # üîß –ù–ê–°–¢–†–û–ô–ö–ò –≠–õ–ï–ú–ï–ù–¢–ê
        self.setFlag(QGraphicsItem.ItemIsMovable, True)
        self.setFlag(QGraphicsItem.ItemIsSelectable, True)
        self.setFlag(QGraphicsItem.ItemSendsGeometryChanges, True)
        self.setAcceptHoverEvents(True)
        self.setZValue(1)
        
        # ‚ú® –°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –¢–ï–ù–¨
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(12)
        shadow.setColor(self.colors['shadow'])
        shadow.setOffset(0, 4)
        self.setGraphicsEffect(shadow)
        
        # üìä –í–´–ß–ò–°–õ–Ø–ï–ú –†–ê–ó–ú–ï–†–´
        self.calculate_optimal_layout()
        
        # üîå –°–û–ó–î–ê–ï–ú –ü–ò–ù–´
        self.input_pins: List[PinGraphicsItem] = []
        self.output_pins: List[PinGraphicsItem] = []
        self.create_modern_pins()
        
        # üé® –§–ò–ù–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê
        self.update_visual_state()
        
    def calculate_optimal_layout(self) -> None:
        """–¢–û–ß–ù–´–ô —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏."""
        # üìù –†–ê–ó–ú–ï–†–´ –¢–ï–ö–°–¢–ê
        title_font = QFont("Segoe UI", 10, QFont.Weight.DemiBold)
        title_metrics = QFontMetrics(title_font)
        title_width = title_metrics.horizontalAdvance(self.node.name) + (self.metrics['padding'] * 2)
        
        pin_font = QFont("Segoe UI", 8)
        pin_metrics = QFontMetrics(pin_font)
        
        # üìè –†–ê–ó–ú–ï–†–´ –ü–ò–ù–û–í (—Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ NON-EXEC –ø–∏–Ω—ã –¥–ª—è –≤—ã—Å–æ—Ç—ã)
        max_input_width = 0
        max_output_width = 0
        regular_input_count = 0
        regular_output_count = 0
        
        from ..core.types import PinType
        
        for pin in self.node.input_pins.values():
            if pin.info.pin_type != PinType.EXEC:  # –ò—Å–∫–ª—é—á–∞–µ–º exec –ø–∏–Ω—ã –∏–∑ —Ä–∞—Å—á–µ—Ç–∞
                width = pin_metrics.horizontalAdvance(pin.info.name)
                max_input_width = max(max_input_width, width)
                regular_input_count += 1
            
        for pin in self.node.output_pins.values():
            if pin.info.pin_type != PinType.EXEC:  # –ò—Å–∫–ª—é—á–∞–µ–º exec –ø–∏–Ω—ã –∏–∑ —Ä–∞—Å—á–µ—Ç–∞
                width = pin_metrics.horizontalAdvance(pin.info.name)
                max_output_width = max(max_output_width, width)
                regular_output_count += 1
        
        # üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ê–ó–ú–ï–†–´
        content_width = max_input_width + max_output_width + (self.metrics['pin_size'] * 2) + (self.metrics['padding'] * 3)
        
        self.width = max(title_width, content_width, self.metrics['min_width'])
        
        # –°—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–æ–ª—å–∫–æ –ø–æ –æ–±—ã—á–Ω—ã–º –ø–∏–Ω–∞–º (exec –≤ —à–∞–ø–∫–µ)
        max_regular_pins = max(regular_input_count, regular_output_count, 1)
        content_height = max_regular_pins * self.metrics['pin_spacing'] + self.metrics['padding']
        
        # üñºÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ú–ï–°–¢–û –î–õ–Ø –ü–†–ï–í–¨–Æ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        preview_height = 0
        if self._is_preview_node():
            preview_height = 140  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
            self.width = max(self.width, 220)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            preview_height += 25
        
        self.height = self.metrics['title_height'] + content_height + preview_height + self.metrics['padding']
        
        # üñºÔ∏è –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–ò–ö
        self.setRect(0, 0, self.width, self.height)
    
    def _is_preview_node(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –Ω–æ–¥–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        return self.node.__class__.__name__ == "ImagePreviewNode"
    
    def _has_preview_image(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –Ω–æ–¥—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—å—é."""
        if not self._is_preview_node():
            return False
        return hasattr(self.node, 'has_preview_image') and self.node.has_preview_image()
    
    def update_preview(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)."""
        if self._is_preview_node():
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –Ω–æ–¥—ã
            self.calculate_optimal_layout()
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.update()
        
    def create_modern_pins(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∏–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        # üßπ –û–ß–ò–°–¢–ö–ê
        for pin in self.input_pins + self.output_pins:
            if pin.scene():
                pin.scene().removeItem(pin)
        self.input_pins.clear()
        self.output_pins.clear()
        
        # üìç –°–¢–ê–†–¢–û–í–´–ï –ü–û–ó–ò–¶–ò–ò
        input_y = self.metrics['title_height'] + self.metrics['padding']
        output_y = self.metrics['title_height'] + self.metrics['padding']
        
        # üéØ –°–ù–ê–ß–ê–õ–ê –°–û–ó–î–ê–ï–ú EXEC –ü–ò–ù–´ –í –®–ê–ü–ö–ï
        exec_input_pins = []
        exec_output_pins = []
        regular_input_pins = []
        regular_output_pins = []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–∏–Ω—ã –Ω–∞ exec –∏ –æ–±—ã—á–Ω—ã–µ
        from ..core.types import PinType
        
        for pin in self.node.input_pins.values():
            if pin.info.pin_type == PinType.EXEC:
                exec_input_pins.append(pin)
            else:
                regular_input_pins.append(pin)
                
        for pin in self.node.output_pins.values():
            if pin.info.pin_type == PinType.EXEC:
                exec_output_pins.append(pin)
            else:
                regular_output_pins.append(pin)
        
        # üî• EXEC –ü–ò–ù–´ –í –®–ê–ü–ö–ï (input exec —Å–ª–µ–≤–∞, output exec —Å–ø—Ä–∞–≤–∞)
        exec_y = self.metrics['title_height'] / 2  # –í —Ü–µ–Ω—Ç—Ä–µ —à–∞–ø–∫–∏
        
        for pin in exec_input_pins:
            pin_item = ModernPinGraphicsItem(pin, self, False)
            pin_item.setPos(0, exec_y)  # –ù–ê –°–ê–ú–û–ú –ö–†–ê–Æ —Å–ª–µ–≤–∞ - —Ä–∞–≤–Ω–æ–ø—Ä–∞–≤–∏–µ!
            pin_item.setParentItem(self)
            # –ù–µ —Å–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª –¥–ª—è exec –ø–∏–Ω–æ–≤ –≤ —à–∞–ø–∫–µ
            self.input_pins.append(pin_item)
            
        for pin in exec_output_pins:
            pin_item = ModernPinGraphicsItem(pin, self, True)
            pin_item.setPos(self.width, exec_y)  # –ù–ê –°–ê–ú–û–ú –ö–†–ê–Æ —Å–ø—Ä–∞–≤–∞ - —Ä–∞–≤–Ω–æ–ø—Ä–∞–≤–∏–µ!
            pin_item.setParentItem(self)
            # –ù–µ —Å–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª –¥–ª—è exec –ø–∏–Ω–æ–≤ –≤ —à–∞–ø–∫–µ
            self.output_pins.append(pin_item)
        
        # üîå –û–ë–´–ß–ù–´–ï –í–•–û–î–ù–´–ï –ü–ò–ù–´ (—Å–ª–µ–≤–∞, –ø–æ–¥ —à–∞–ø–∫–æ–π)
        for pin in regular_input_pins:
            pin_item = ModernPinGraphicsItem(pin, self, False)
            pin_item.setPos(0, input_y)
            pin_item.setParentItem(self)
            pin_item.create_modern_label()
            self.input_pins.append(pin_item)
            input_y += self.metrics['pin_spacing']
            
        # üîå –û–ë–´–ß–ù–´–ï –í–´–•–û–î–ù–´–ï –ü–ò–ù–´ (—Å–ø—Ä–∞–≤–∞, –ø–æ–¥ —à–∞–ø–∫–æ–π)
        for pin in regular_output_pins:
            pin_item = ModernPinGraphicsItem(pin, self, True)
            pin_item.setPos(self.width, output_y)
            pin_item.setParentItem(self)
            pin_item.create_modern_label()
            self.output_pins.append(pin_item)
            output_y += self.metrics['pin_spacing']
            
    def paint(self, painter: QPainter, option: QStyleOptionGraphicsItem, widget: QWidget = None) -> None:
        """–°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º."""
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        painter.setRenderHint(QPainter.RenderHint.SmoothPixmapTransform)
        
        # üö´ –û–¢–ö–õ–Æ–ß–ê–ï–ú —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ Qt
        option.state &= ~QStyle.StateFlag.State_Selected
        
        rect = self.rect()
        radius = self.metrics['corner_radius']
        
        # üé® –û–°–ù–û–í–ù–û–ô –§–û–ù
        main_path = QPainterPath()
        main_path.addRoundedRect(rect, radius, radius)
        
        bg_color = self.colors['background_selected'] if self.isSelected() else self.colors['background']
        if self.is_hovered and not self.isSelected():
            # üåü HOVER —ç—Ñ—Ñ–µ–∫—Ç
            bg_color = bg_color.lighter(110)
        
        # üìà –ì–†–ê–î–ò–ï–ù–¢ –§–û–ù–ê
        bg_gradient = QLinearGradient(rect.topLeft(), rect.bottomLeft())
        bg_gradient.setColorAt(0, bg_color.lighter(105))
        bg_gradient.setColorAt(0.1, bg_color)
        bg_gradient.setColorAt(0.9, bg_color)
        bg_gradient.setColorAt(1, bg_color.darker(105))
        
        painter.fillPath(main_path, QBrush(bg_gradient))
        
        # üéØ –ó–ê–ì–û–õ–û–í–û–ö —Å —Ü–≤–µ—Ç–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        title_rect = QRectF(rect.x(), rect.y(), rect.width(), self.metrics['title_height'])
        title_path = QPainterPath()
        title_path.addRoundedRect(title_rect, radius, radius)
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∏–∂–Ω–∏–µ —É–≥–ª—ã
        title_path.addRect(QRectF(rect.x(), rect.y() + radius, rect.width(), self.metrics['title_height'] - radius))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        title_color_light, title_color_dark = self.get_category_colors()
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ü–≤–µ—Ç–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        title_gradient = QLinearGradient(title_rect.topLeft(), title_rect.bottomLeft())
        if self.isSelected():
            # –ü—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –¥–µ–ª–∞–µ–º —è—Ä—á–µ
            title_gradient.setColorAt(0, title_color_light.lighter(130))
            title_gradient.setColorAt(1, title_color_dark.lighter(110))
        else:
            title_gradient.setColorAt(0, title_color_light.lighter(110))
            title_gradient.setColorAt(1, title_color_dark)
        
        painter.fillPath(title_path, QBrush(title_gradient))
        
        # üìù –¢–ï–ö–°–¢ –ó–ê–ì–û–õ–û–í–ö–ê
        painter.setPen(QPen(self.colors['text'], 1))
        title_font = QFont("Segoe UI", 10, QFont.Weight.DemiBold)
        painter.setFont(title_font)
        
        text_rect = QRectF(
            rect.x() + self.metrics['padding'], 
            rect.y() + 4, 
            rect.width() - (self.metrics['padding'] * 2), 
            self.metrics['title_height'] - 8
        )
        painter.drawText(text_rect, Qt.AlignmentFlag.AlignCenter, self.node.name)
        
        # üî≤ –ì–†–ê–ù–ò–¶–ê
        border_color = self.colors['border_selected'] if self.isSelected() else self.colors['border']
        border_width = self.metrics['selected_border_width'] if self.isSelected() else self.metrics['border_width']
        
        painter.setPen(QPen(border_color, border_width))
        painter.drawPath(main_path)
        
        # ‚ú® –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´
        if self.isSelected():
            # üåü –í–ù–£–¢–†–ï–ù–ù–ò–ô GLOW
            inner_rect = rect.adjusted(1.5, 1.5, -1.5, -1.5)
            inner_path = QPainterPath()
            inner_path.addRoundedRect(inner_rect, radius - 1, radius - 1)
            
            glow_gradient = QLinearGradient(inner_rect.topLeft(), inner_rect.bottomLeft())
            glow_color = self.colors['border_selected']
            glow_gradient.setColorAt(0, QColor(glow_color.red(), glow_color.green(), glow_color.blue(), 30))
            glow_gradient.setColorAt(0.5, QColor(0, 0, 0, 0))
            glow_gradient.setColorAt(1, QColor(0, 0, 0, 0))
            
            painter.fillPath(inner_path, QBrush(glow_gradient))
            
        # üìè –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨–ù–ê–Ø –õ–ò–ù–ò–Ø
        separator_y = rect.y() + self.metrics['title_height']
        separator_color = self.colors['border'].lighter(140)
        painter.setPen(QPen(separator_color, 0.8))
        painter.drawLine(
            QPointF(rect.x() + 1, separator_y),
            QPointF(rect.x() + rect.width() - 1, separator_y)
        )
        
        # üñºÔ∏è –û–¢–†–ò–°–û–í–ö–ê –ü–†–ï–í–¨–Æ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–≤—Å–µ–≥–¥–∞ –¥–ª—è Preview Node)
        if self._is_preview_node():
            self._paint_image_preview(painter, rect)
    
    def _paint_image_preview(self, painter: QPainter, rect: QRectF) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –Ω–æ–¥—ã."""
        # –í—Å–µ–≥–¥–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä–µ–≤—å—é (–ø–æ–¥ –ø–∏–Ω–∞–º–∏)
        pins_area_height = len([p for p in self.node.input_pins.values() if p.info.pin_type.name != 'EXEC']) * self.metrics['pin_spacing'] + self.metrics['padding']
        preview_y = rect.y() + self.metrics['title_height'] + pins_area_height + 8
        preview_height = 130  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
        preview_width = rect.width() - (self.metrics['padding'] * 2)
        
        preview_rect = QRectF(
            rect.x() + self.metrics['padding'],
            preview_y,
            preview_width,
            preview_height
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—å—é
        preview_image = self.node.get_preview_image()
        
        try:
            # üñºÔ∏è –†–ê–ú–ö–ê –î–õ–Ø –ü–†–ï–í–¨–Æ (–≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è)
            preview_bg_color = QColor(25, 27, 30)  # –¢–µ–º–Ω–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞
            preview_border_color = self.colors['border'].lighter(120)
            
            # –§–æ–Ω –ø—Ä–µ–≤—å—é
            painter.fillRect(preview_rect, QBrush(preview_bg_color))
            
            # –†–∞–º–∫–∞ –ø—Ä–µ–≤—å—é
            painter.setPen(QPen(preview_border_color, 1))
            painter.drawRect(preview_rect)
            
            if not preview_image:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∫–æ–≥–¥–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                painter.setPen(QPen(QColor(150, 150, 150), 1))
                painter.drawText(preview_rect, Qt.AlignmentFlag.AlignCenter, "No Image\nClick refresh after execution")
                
                # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞)
                self._paint_refresh_button(painter, preview_rect)
                return
            
            from PySide6.QtGui import QPixmap
            from PIL.ImageQt import ImageQt
            
            # üé® –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –ò –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            img_copy = preview_image.copy()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            content_rect = preview_rect.adjusted(4, 4, -4, -4)  # –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ —Ä–∞–º–∫–∏
            img_width, img_height = img_copy.size
            scale_x = content_rect.width() / img_width
            scale_y = content_rect.height() / img_height
            scale = min(scale_x, scale_y)
            
            new_width = int(img_width * scale)
            new_height = int(img_height * scale)
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_copy = img_copy.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QPixmap
            qt_image = ImageQt(img_copy)
            pixmap = QPixmap.fromImage(qt_image)
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–µ–≤—å—é
            image_x = content_rect.x() + (content_rect.width() - new_width) / 2
            image_y = content_rect.y() + (content_rect.height() - new_height) / 2
            
            # –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            painter.drawPixmap(int(image_x), int(image_y), pixmap)
            
            # üìù –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ò
            info_text = f"{img_width}√ó{img_height}"
            info_font = QFont("Segoe UI", 7)
            painter.setFont(info_font)
            painter.setPen(QPen(self.colors['text_secondary'], 1))
            
            info_rect = QRectF(
                preview_rect.x() + 4,
                preview_rect.bottom() - 15,
                preview_rect.width() - 80,  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                12
            )
            painter.drawText(info_rect, Qt.AlignmentFlag.AlignLeft, info_text)
            
            # üîÑ –ö–ù–û–ü–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø
            self._paint_refresh_button(painter, preview_rect)
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∏—Å—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            painter.fillRect(preview_rect, QBrush(QColor(50, 50, 50)))
            painter.setPen(QPen(QColor(150, 150, 150), 1))
            painter.drawText(preview_rect, Qt.AlignmentFlag.AlignCenter, "Preview Error")
    
    def _paint_refresh_button(self, painter: QPainter, preview_rect: QRectF) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é."""
        # üîÑ –†–ê–ó–ú–ï–†–´ –ò –ü–û–ó–ò–¶–ò–Ø –ö–ù–û–ü–ö–ò
        button_width = 70
        button_height = 18
        button_x = preview_rect.right() - button_width - 4
        button_y = preview_rect.bottom() - button_height - 2
        
        self.refresh_button_rect = QRectF(button_x, button_y, button_width, button_height)
        
        # üé® –¶–í–ï–¢–ê –ö–ù–û–ü–ö–ò
        button_bg = QColor(0, 122, 255) if self.is_refresh_button_hovered() else QColor(70, 130, 180)
        button_text_color = QColor(255, 255, 255)
        button_border = QColor(0, 100, 200)
        
        # üñºÔ∏è –§–û–ù–û–í–´–ô –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–ò–ö
        button_path = QPainterPath()
        button_path.addRoundedRect(self.refresh_button_rect, 3, 3)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–∏
        button_gradient = QLinearGradient(self.refresh_button_rect.topLeft(), self.refresh_button_rect.bottomLeft())
        button_gradient.setColorAt(0, button_bg.lighter(110))
        button_gradient.setColorAt(1, button_bg.darker(110))
        
        painter.fillPath(button_path, QBrush(button_gradient))
        
        # –†–∞–º–∫–∞ –∫–Ω–æ–ø–∫–∏
        painter.setPen(QPen(button_border, 1))
        painter.drawPath(button_path)
        
        # üìù –¢–ï–ö–°–¢ –ö–ù–û–ü–ö–ò
        painter.setPen(QPen(button_text_color, 1))
        button_font = QFont("Segoe UI", 7, QFont.Weight.DemiBold)
        painter.setFont(button_font)
        painter.drawText(self.refresh_button_rect, Qt.AlignmentFlag.AlignCenter, "üîÑ Refresh")
    
    def is_refresh_button_hovered(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞–≤–µ–¥–µ–Ω–∞ –ª–∏ –º—ã—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        return hasattr(self, '_refresh_button_hovered') and self._refresh_button_hovered
    
    def get_refresh_button_rect(self) -> QRectF:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤."""
        return getattr(self, 'refresh_button_rect', QRectF())
    
    def _check_refresh_button_hover(self, pos: QPointF) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º—ã—à—å –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        button_rect = self.get_refresh_button_rect()
        was_hovered = self.is_refresh_button_hovered()
        self._refresh_button_hovered = button_rect.contains(pos)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if was_hovered != self._refresh_button_hovered:
            self.update()
    
    def _is_click_on_refresh_button(self, pos: QPointF) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        button_rect = self.get_refresh_button_rect()
        return button_rect.contains(pos)
    
    def _handle_refresh_button_click(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        from loguru import logger
        import asyncio
        import threading
        
        logger.info("üîÑ Refresh button clicked - refreshing preview")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –Ω–æ–¥—ã
        if hasattr(self.node, 'get_preview_image'):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if self.node.input_pins and 'image' in self.node.input_pins:
                    input_pin = self.node.input_pins['image']
                    if input_pin.is_connected() and input_pin._cached_value is not None:
                        # –ï—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                        def refresh_async():
                            try:
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                
                                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                                from ..core.types import ExecutionContext
                                from asyncio import Event
                                context = ExecutionContext(
                                    cancelled=Event(),
                                    progress_callback=None
                                )
                                
                                # –ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–¥—É
                                loop.run_until_complete(self.node.process_image(context))
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                from PySide6.QtCore import QTimer
                                QTimer.singleShot(0, lambda: self._update_preview_ui())
                                
                                loop.close()
                            except Exception as e:
                                logger.error(f"Failed to refresh preview: {e}")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        thread = threading.Thread(target=refresh_async, daemon=True)
                        thread.start()
                    else:
                        logger.warning("No connected image to refresh")
                        self._show_no_input_message()
                else:
                    logger.warning("No image input pin found")
                    
            except Exception as e:
                logger.error(f"Error during preview refresh: {e}")
                
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.calculate_optimal_layout()
            self.update()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–≤–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å)
            self._show_refresh_feedback()
    
    def _update_preview_ui(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –ø—Ä–µ–≤—å—é –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        self.calculate_optimal_layout()
        self.update()
        from loguru import logger
        logger.info("Preview UI updated successfully")
    
    def _show_no_input_message(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        from loguru import logger
        logger.warning("No input image connected - connect an image first")
    
    def _show_refresh_feedback(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        from loguru import logger
        logger.debug("Preview refreshed successfully")
        
    def hoverEnterEvent(self, event: QHoverEvent) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π hover —ç—Ñ—Ñ–µ–∫—Ç."""
        self.is_hovered = True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hover –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self._is_preview_node():
            self._check_refresh_button_hover(event.pos())
        self.update()
        super().hoverEnterEvent(event)
        
    def hoverLeaveEvent(self, event: QHoverEvent) -> None:
        """–£–±–∏—Ä–∞–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç."""
        self.is_hovered = False
        self._refresh_button_hovered = False
        self.update()
        super().hoverLeaveEvent(event)
    
    def hoverMoveEvent(self, event: QHoverEvent) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏."""
        if self._is_preview_node():
            self._check_refresh_button_hover(event.pos())
            self.update()
        super().hoverMoveEvent(event)
        
    def mousePressEvent(self, event: QMouseEvent) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç–∫–ª–∏–∫–æ–º."""
        if event.button() == Qt.MouseButton.LeftButton:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if self._is_preview_node() and self._is_click_on_refresh_button(event.pos()):
                self._handle_refresh_button_click()
                event.accept()
                return
            self.setSelected(True)
        super().mousePressEvent(event)
        
    def update_visual_state(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        self.update()
        
    def get_node_icon(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –Ω–æ–¥—ã."""
        icon_map = {
            'SolidColorNode': 'üé®',
            'BlurNode': 'üåÄ', 
            'BrightnessContrastNode': '‚òÄÔ∏è',
            'SharpenNode': '‚ö°',
            'LoadImageNode': 'üìÅ',
            'SaveImageNode': 'üíæ',
        }
        return icon_map.get(self.node.__class__.__name__, '‚öôÔ∏è')
        
    def get_category_colors(self) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–¥—ã."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –±–∞–∑–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É
        node_class_name = self.node.__class__.__name__
        base_classes = [cls.__name__ for cls in self.node.__class__.__mro__]
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if 'FilterNode' in base_classes:
            # üîµ –°–∏–Ω–∏–µ —Ç–æ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
            return QColor(45, 85, 135), QColor(35, 65, 105)
        elif 'ColorNode' in base_classes:
            # üü° –ñ–µ–ª—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–µ —Ç–æ–Ω–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –Ω–æ–¥
            return QColor(165, 110, 30), QColor(135, 85, 20)
        elif 'GeneratorNode' in base_classes:
            # üü¢ –ó–µ–ª–µ–Ω—ã–µ —Ç–æ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
            return QColor(65, 125, 65), QColor(45, 95, 45)
        elif 'IONode' in base_classes:
            # üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ —Ç–æ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
            return QColor(125, 65, 125), QColor(95, 45, 95)
        elif 'TransformNode' in base_classes:
            # üî¥ –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–µ —Ç–æ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
            return QColor(135, 75, 75), QColor(105, 55, 55)
        else:
            # üîò –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ç–æ–Ω–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            return self.colors['title_bg'], self.colors['title_bg']
    
    def get_pin_at_position(self, pos: QPointF) -> Optional[PinGraphicsItem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏."""
        for pin in self.input_pins + self.output_pins:
            if pin.contains(pin.mapFromParent(pos)):
                return pin
        return None
        
    def itemChange(self, change: QGraphicsItem.GraphicsItemChange, value: Any) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–∞."""
        if change == QGraphicsItem.GraphicsItemChange.ItemSelectedChange:
            self.update_visual_state()
        elif change == QGraphicsItem.GraphicsItemChange.ItemPositionHasChanged:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–æ–¥—ã
            self.update_connections()
        return super().itemChange(change, value)
        
    def update_connections(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–æ–π –Ω–æ–¥–æ–π."""
        if hasattr(self.editor_view, 'scene'):
            # –ò—â–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ü–µ–Ω–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–æ–π –Ω–æ–¥–æ–π
            for item in self.editor_view.scene.items():
                if hasattr(item, 'start_pin') and hasattr(item, 'end_pin'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —ç—Ç–æ–π –Ω–æ–¥–æ–π
                    start_node_id = getattr(item.start_pin, 'node_id', None) if item.start_pin else None
                    end_node_id = getattr(item.end_pin, 'node_id', None) if item.end_pin else None
                    
                    if start_node_id == self.node_id or end_node_id == self.node_id:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        if hasattr(item, 'update_path'):
                            item.update_path()
        
    def mouseMoveEvent(self, event: QMouseEvent) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏."""
        super().mouseMoveEvent(event)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ 


class ModernPinGraphicsItem(QGraphicsItem):
    """
    üîå –°–û–í–†–ï–ú–ï–ù–ù–´–ô –ü–ò–ù —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏.
    """
    
    def __init__(self, pin: Pin, parent_node: NodeGraphicsItem, is_output: bool):
        super().__init__()
        self.pin = pin
        self.parent_node = parent_node
        self.is_output = is_output
        self.pin_type = pin.info.pin_type
        self.node_id = parent_node.node.id
        self.pin_id = pin.info.id
        
        # üìê –†–ê–ó–ú–ï–†–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò
        from ..core.types import PinType
        if self.pin_type == PinType.EXEC:
            # üî∫ EXEC –ø–∏–Ω—ã - —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ (–ë–û–õ–¨–®–ï!)
            self.radius = 6
            self.hover_radius = 7
            self.triangle_size = 12  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 8 –¥–æ 12
        else:
            # ‚≠ï –û–±—ã—á–Ω—ã–µ –ø–∏–Ω—ã - –∫—Ä—É–≥–ª—ã–µ
            self.radius = 4.5
            self.hover_radius = 6
            
        self.active_radius = 5.5
        self.current_radius = self.radius
        
        # üéØ –°–û–°–¢–û–Ø–ù–ò–Ø
        self.is_hovered = False
        self.is_connected = False
        
        # üîß –ù–ê–°–¢–†–û–ô–ö–ò –≠–õ–ï–ú–ï–ù–¢–ê
        self.setFlag(QGraphicsItem.ItemIsSelectable, False)
        self.setAcceptHoverEvents(True)
        self.setZValue(10)  # –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
        
        # üé® –¶–í–ï–¢–ê - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É
        self.setup_colors()
        
        # üìù –õ–ï–ô–ë–õ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ)
        self.label_item = None
        
    def boundingRect(self) -> QRectF:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–∏–Ω–∞."""
        from ..core.types import PinType
        if self.pin_type == PinType.EXEC:
            # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            return QRectF(-self.triangle_size/2, -self.triangle_size/2, self.triangle_size, self.triangle_size)
        else:
            # –ö—Ä—É–≥
            return QRectF(-self.current_radius, -self.current_radius, self.current_radius * 2, self.current_radius * 2)
    
    def setup_colors(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –ø–∏–Ω–∞."""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–∏–Ω–∞ –∏–∑ pin.info
        pin_type = self.pin.info.pin_type
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –∏–∑ PinType enum
        self.base_color = pin_type.color
        
    def create_modern_label(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ª–µ–π–±–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        if self.label_item is not None:
            return
            
        self.label_item = QGraphicsTextItem(self.pin.info.name, self.parent_node)
        
        # üé® –°–¢–ò–õ–¨ –¢–ï–ö–°–¢–ê
        self.label_item.setDefaultTextColor(self.parent_node.colors['text_secondary'])
        label_font = QFont("Segoe UI", 8, QFont.Weight.Normal)
        self.label_item.setFont(label_font)
        
        # üìç –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï
        pin_pos = self.pos()
        label_rect = self.label_item.boundingRect()
        
        if self.is_output:
            # –í—ã—Ö–æ–¥–Ω–æ–π –ø–∏–Ω - –ª–µ–π–±–ª —Å–ª–µ–≤–∞
            label_x = pin_pos.x() - label_rect.width() - 10
            label_y = pin_pos.y() - (label_rect.height() / 2) + 1
        else:
            # –í—Ö–æ–¥–Ω–æ–π –ø–∏–Ω - –ª–µ–π–±–ª —Å–ø—Ä–∞–≤–∞  
            label_x = pin_pos.x() + 10
            label_y = pin_pos.y() - (label_rect.height() / 2) + 1
            
        self.label_item.setPos(label_x, label_y)
        
    def paint(self, painter: QPainter, option: QStyleOptionGraphicsItem, widget: QWidget = None) -> None:
        """–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∏–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤."""
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        from ..core.types import PinType
        
        if self.pin_type == PinType.EXEC:
            # üî∫ –†–ò–°–£–ï–ú –¢–†–ï–£–ì–û–õ–¨–ù–£–Æ –°–¢–†–ï–õ–û–ß–ö–£ –¥–ª—è exec –ø–∏–Ω–æ–≤
            self._paint_exec_triangle(painter)
        else:
            # ‚≠ï –†–ò–°–£–ï–ú –ö–†–£–ì –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–∏–Ω–æ–≤
            self._paint_regular_circle(painter)
            
    def _paint_exec_triangle(self, painter: QPainter) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –¥–ª—è exec –ø–∏–Ω–æ–≤."""
        # üî∫ –°–û–ó–î–ê–ï–ú –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö
        triangle = QPainterPath()
        size = self.triangle_size / 2
        
        if self.is_output:
            # –°—Ç—Ä–µ–ª–æ—á–∫–∞ –≤–ø—Ä–∞–≤–æ –¥–ª—è output exec (–ò–ó –Ω–æ–¥—ã) ‚ñ∂Ô∏è
            triangle.moveTo(size, 0)      # –û—Å—Ç—Ä–∏–µ —Å–ø—Ä–∞–≤–∞
            triangle.lineTo(-size, -size)  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
            triangle.lineTo(-size, size)   # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        else:
            # –°—Ç—Ä–µ–ª–æ—á–∫–∞ –≤–ø—Ä–∞–≤–æ –¥–ª—è input exec (–í –Ω–æ–¥—É) ‚ñ∂Ô∏è 
            triangle.moveTo(size, 0)      # –û—Å—Ç—Ä–∏–µ —Å–ø—Ä–∞–≤–∞
            triangle.lineTo(-size, -size)  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
            triangle.lineTo(-size, size)   # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        triangle.closeSubpath()
        
        # üé® –¶–í–ï–¢ –ò –ó–ê–õ–ò–í–ö–ê - —Å–µ—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–∏–Ω–æ–≤!
        if self.is_connected:
            # üîó –°–û–ï–î–ò–ù–ï–ù–ù–´–ô –ü–ò–ù - —Ü–≤–µ—Ç–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
            if self.is_hovered:
                fill_color = self.base_color.lighter(120)
            else:
                fill_color = self.base_color
        else:
            # üìç –ù–ï –°–û–ï–î–ò–ù–ï–ù–ù–´–ô –ü–ò–ù - —Å–µ—Ä–∞—è –∑–∞–ª–∏–≤–∫–∞ —Å —Ç–µ–º –∂–µ –¥–∏–∑–∞–π–Ω–æ–º!
            gray_base = QColor(120, 120, 120)  # –°—Ä–µ–¥–Ω–µ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
            if self.is_hovered:
                fill_color = gray_base.lighter(130)  # –°–≤–µ—Ç–ª–µ–µ –ø—Ä–∏ hover
            else:
                fill_color = gray_base
                
        painter.setBrush(QBrush(fill_color))
        
        # üî≤ –ì–†–ê–ù–ò–¶–ê - –í–°–ï–ì–î–ê —Ü–≤–µ—Ç–Ω–∞—è, —Ç–æ–ª—å–∫–æ –∑–∞–ª–∏–≤–∫–∞ –º–µ–Ω—è–µ—Ç—Å—è!
        border_color = self.base_color.darker(130)
        border_width = 1.0 if not self.is_hovered else 1.3
        painter.setPen(QPen(border_color, border_width))
        
        # üéØ –†–ò–°–£–ï–ú –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö
        painter.drawPath(triangle)
        
    def _paint_regular_circle(self, painter: QPainter) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∫—Ä—É–≥–ª–æ–≥–æ –ø–∏–Ω–∞ - –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–∏–Ω–æ–≤!"""
        rect = self.boundingRect()
        center = rect.center()
        
        # üé® –†–ê–î–ò–ê–õ–¨–ù–´–ô –ì–†–ê–î–ò–ï–ù–¢ –¥–ª—è –≤—Å–µ—Ö –ø–∏–Ω–æ–≤!
        gradient = QRadialGradient(center, self.current_radius)
        
        if self.is_connected:
            # üîó –°–û–ï–î–ò–ù–ï–ù–ù–´–ô –ü–ò–ù - —Ü–≤–µ—Ç–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            if self.is_hovered:
                # üåü HOVER —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                gradient.setColorAt(0, self.base_color.lighter(180))
                gradient.setColorAt(0.3, self.base_color.lighter(140))
                gradient.setColorAt(0.7, self.base_color)
                gradient.setColorAt(1, self.base_color.darker(130))
            else:
                # üîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                gradient.setColorAt(0, self.base_color.lighter(160))
                gradient.setColorAt(0.4, self.base_color.lighter(120))
                gradient.setColorAt(0.8, self.base_color)
                gradient.setColorAt(1, self.base_color.darker(120))
        else:
            # üìç –ù–ï –°–û–ï–î–ò–ù–ï–ù–ù–´–ô –ü–ò–ù - —Å–µ—Ä—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å —Ç–µ–º –∂–µ –¥–∏–∑–∞–π–Ω–æ–º!
            gray_base = QColor(120, 120, 120)  # –°—Ä–µ–¥–Ω–µ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
            if self.is_hovered:
                # üåü HOVER —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–µ—Ä—ã–π
                gradient.setColorAt(0, gray_base.lighter(180))
                gradient.setColorAt(0.3, gray_base.lighter(140))
                gradient.setColorAt(0.7, gray_base)
                gradient.setColorAt(1, gray_base.darker(130))
            else:
                # üìç –û–ë–´–ß–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–µ—Ä—ã–π
                gradient.setColorAt(0, gray_base.lighter(160))
                gradient.setColorAt(0.4, gray_base.lighter(120))
                gradient.setColorAt(0.8, gray_base)
                gradient.setColorAt(1, gray_base.darker(120))
        
        painter.setBrush(QBrush(gradient))
        
        # üî≤ –ì–†–ê–ù–ò–¶–ê - –í–°–ï–ì–î–ê —Ü–≤–µ—Ç–Ω–∞—è, —Ç–æ–ª—å–∫–æ –∑–∞–ª–∏–≤–∫–∞ –º–µ–Ω—è–µ—Ç—Å—è!
        border_color = self.base_color.darker(150) if not self.is_hovered else self.base_color.darker(120)
        border_width = 1.2 if not self.is_hovered else 1.5
        painter.setPen(QPen(border_color, border_width))
        
        # üéØ –†–ò–°–£–ï–ú –ö–†–£–ì
        painter.drawEllipse(rect)
        
        # ‚ú® –ë–õ–ò–ö –î–õ–Ø HOVER - –¥–ª—è –≤—Å–µ—Ö –ø–∏–Ω–æ–≤!
        if self.is_hovered:
            highlight_gradient = QRadialGradient(
                center + QPointF(-self.current_radius * 0.3, -self.current_radius * 0.3), 
                self.current_radius * 0.4
            )
            highlight_gradient.setColorAt(0, QColor(255, 255, 255, 60))
            highlight_gradient.setColorAt(0.7, QColor(255, 255, 255, 20))
            highlight_gradient.setColorAt(1, QColor(255, 255, 255, 0))
            
            painter.setBrush(QBrush(highlight_gradient))
            painter.setPen(Qt.PenStyle.NoPen)
            highlight_rect = QRectF(
                center.x() - self.current_radius * 0.6,
                center.y() - self.current_radius * 0.6,
                self.current_radius * 1.2,
                self.current_radius * 1.2
            )
            painter.drawEllipse(highlight_rect)
        
    def hoverEnterEvent(self, event: QHoverEvent) -> None:
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏."""
        self.is_hovered = True
        self.current_radius = self.hover_radius
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ 
        self.prepareGeometryChange()
        self.update()
        super().hoverEnterEvent(event)
        
    def hoverLeaveEvent(self, event: QHoverEvent) -> None:
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞."""
        self.is_hovered = False
        self.current_radius = self.radius
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.prepareGeometryChange()
        self.update()
        super().hoverLeaveEvent(event)
        
    def set_connected(self, connected: bool) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        self.is_connected = connected
        self.update()
        
    def mousePressEvent(self, event: QMouseEvent) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        if event.button() == Qt.MouseButton.LeftButton:
            # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤—ã–±–æ—Ä–∞ –ø–∏–Ω–∞ –¥–ª—è PropertiesViewModel
            self.parent_node.editor_view.pin_selected.emit(self.pin_id)
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ editor_view
            self.parent_node.editor_view.start_connection_creation(self)
        super().mousePressEvent(event)


class ConnectionGraphicsItem(QGraphicsPathItem):
    """
    üîó –°–û–í–†–ï–ú–ï–ù–ù–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏.
    """
    
    def __init__(self, start_pin: PinGraphicsItem, end_pin: Optional[PinGraphicsItem], 
                 connection_id: Optional[str], editor_view, is_temporary: bool = False):
        super().__init__()
        self.start_pin = start_pin
        self.end_pin = end_pin
        self.connection_id = connection_id
        self.editor_view = editor_view
        self.is_temporary = is_temporary
        
        # üéØ –°–û–°–¢–û–Ø–ù–ò–Ø
        self.is_hovered = False
        self.is_selected = False
        
        # üé® –í–ò–ó–£–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
        self.visual_config = {
            'temp_width': 4,          # –¢–æ–ª—â–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            'normal_width': 2.5,      # –¢–æ–ª—â–∏–Ω–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            'hover_width': 3.5,       # –¢–æ–ª—â–∏–Ω–∞ –ø—Ä–∏ hover
            'temp_color': QColor(0, 122, 255),     # –°–∏–Ω–∏–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö
            'curve_factor': 0.3,      # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—Ä–∏–≤–∏–∑–Ω—ã
            'glow_radius': 8,         # –†–∞–¥–∏—É—Å —Å–≤–µ—á–µ–Ω–∏—è
        }
        
        # üîß –ù–ê–°–¢–†–û–ô–ö–ò –≠–õ–ï–ú–ï–ù–¢–ê
        self.setFlag(QGraphicsItem.ItemIsSelectable, True)
        self.setAcceptHoverEvents(True)
        
        # ‚ö° Z-VALUE –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–µ–≤
        if is_temporary:
            self.setZValue(150)  # –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        else:
            self.setZValue(5)    # –ú–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ –∏ –ø–∏–Ω–∞–º–∏
        
        # üé® –ù–ê–°–¢–†–û–ô–ö–ê –¶–í–ï–¢–û–í –ò –ì–†–ê–î–ò–ï–ù–¢–û–í
        self.setup_visual_properties()
        
        # üìç –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–£–¢–ò
        self.update_path()
        
    def setup_visual_properties(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        if self.is_temporary:
            self.base_color = self.visual_config['temp_color']
            self.current_width = self.visual_config['temp_width']
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –æ—Ç —Ç–∏–ø–∞ –ø–∏–Ω–∞ - –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–¢–ê–†–£–Æ –°–•–ï–ú–£
            if hasattr(self.start_pin, 'pin_type') and hasattr(self.start_pin.pin_type, 'color'):
                self.base_color = self.start_pin.pin_type.color
            else:
                self.base_color = QColor(120, 120, 120)  # Fallback
            self.current_width = self.visual_config['normal_width']
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–∏–Ω–æ–≤
        if not self.is_temporary:
            self.start_pin.set_connected(True)
            if self.end_pin:
                self.end_pin.set_connected(True)
                
    def create_smooth_path(self, start_pos: QPointF, end_pos: QPointF) -> QPainterPath:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≤–Ω–æ–≥–æ –ø—É—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        path = QPainterPath()
        path.moveTo(start_pos)
        
        # üìè –í–´–ß–ò–°–õ–Ø–ï–ú –†–ê–°–°–¢–û–Ø–ù–ò–ï –ò –ö–û–ù–¢–†–û–õ–¨–ù–´–ï –¢–û–ß–ö–ò
        dx = end_pos.x() - start_pos.x()
        dy = end_pos.y() - start_pos.y()
        distance = (dx ** 2 + dy ** 2) ** 0.5
        
        # ÔøΩÔøΩ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ö–†–ò–í–ò–ó–ù–´
        curve_strength = min(distance * self.visual_config['curve_factor'], 150)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞ —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        use_curves = getattr(self.editor_view, 'use_curved_connections', True)
        
        if use_curves and not self.is_temporary:
            # üåä –ü–õ–ê–í–ù–´–ï –ö–†–ò–í–´–ï (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            ctrl1_x = start_pos.x() + curve_strength
            ctrl1_y = start_pos.y()
            
            ctrl2_x = end_pos.x() - curve_strength
            ctrl2_y = end_pos.y()
            
            # –°–æ–∑–¥–∞–µ–º Bezier –∫—Ä–∏–≤—É—é
            path.cubicTo(
                QPointF(ctrl1_x, ctrl1_y),
                QPointF(ctrl2_x, ctrl2_y),
                end_pos
            )
        else:
            # üìè –ü–†–Ø–ú–´–ï –õ–ò–ù–ò–ò
            path.lineTo(end_pos)
            
        return path
        
    def update_path(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        if not self.start_pin:
            return
            
        # üìç –ü–û–õ–£–ß–ê–ï–ú –ü–û–ó–ò–¶–ò–ò
        start_pos = self.start_pin.scenePos()
        
        if self.end_pin:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            end_pos = self.end_pin.scenePos()
        elif self.is_temporary and hasattr(self, 'temp_end_pos'):
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - —Å–ª–µ–¥—É–µ—Ç –∑–∞ –º—ã—à—å—é
            end_pos = self.temp_end_pos
        else:
            # Fallback
            end_pos = start_pos
            
        # üé® –°–û–ó–î–ê–ï–ú –ü–£–¢–¨
        path = self.create_smooth_path(start_pos, end_pos)
        self.setPath(path)
        
    def update_end_point(self, end_pos: QPointF) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        if self.is_temporary:
            self.temp_end_pos = end_pos
            self.update_path()
            
    def paint(self, painter: QPainter, option: QStyleOptionGraphicsItem, widget: QWidget = None) -> None:
        """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏."""
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        path = self.path()
        if path.isEmpty():
            return
            
        # üé® –ù–ê–°–¢–†–û–ô–ö–ê –¶–í–ï–¢–û–í
        current_color = self.base_color
        if self.is_hovered:
            current_color = current_color.lighter(130)
        elif self.isSelected():
            current_color = current_color.lighter(150)
            
        # üìè –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –¢–û–õ–©–ò–ù–ê
        width = self.current_width
        if self.is_hovered:
            width = self.visual_config['hover_width']
        elif self.isSelected():
            width = self.visual_config['hover_width'] + 0.5
            
        # ‚ú® –≠–§–§–ï–ö–¢ –°–í–ï–ß–ï–ù–ò–Ø –ø—Ä–∏ hover/select
        if self.is_hovered or self.isSelected():
            glow_color = QColor(current_color)
            glow_color.setAlpha(60)
            
            for i in range(3):
                glow_width = width + (i + 1) * 1.5
                glow_pen = QPen(glow_color, glow_width)
                glow_pen.setCapStyle(Qt.PenCapStyle.RoundCap)
                glow_pen.setJoinStyle(Qt.PenJoinStyle.RoundJoin)
                painter.setPen(glow_pen)
                painter.drawPath(path)
                glow_color.setAlpha(glow_color.alpha() // 2)
                
        # üéØ –û–°–ù–û–í–ù–ê–Ø –õ–ò–ù–ò–Ø
        main_pen = QPen(current_color, width)
        main_pen.setCapStyle(Qt.PenCapStyle.RoundCap)
        main_pen.setJoinStyle(Qt.PenJoinStyle.RoundJoin)
        
        # üåà –ì–†–ê–î–ò–ï–ù–¢ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∏–Ω–æ–≤
        if not self.is_temporary and self.end_pin and hasattr(self.end_pin, 'pin_type'):
            if self.start_pin.pin_type != self.end_pin.pin_type:
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ - –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–¢–ê–†–´–ï –¶–í–ï–¢–ê
                start_scene = self.start_pin.scenePos()
                end_scene = self.end_pin.scenePos()
                
                gradient = QLinearGradient(start_scene, end_scene)
                gradient.setColorAt(0, self.start_pin.pin_type.color.lighter(120))
                gradient.setColorAt(1, self.end_pin.pin_type.color.lighter(120))
                
                main_pen.setBrush(QBrush(gradient))
                
        painter.setPen(main_pen)
        painter.drawPath(path)
        
        # üí´ –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–ï –¢–û–ß–ö–ò –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if self.is_temporary:
            self.draw_flow_animation(painter, path, current_color)
            
    def draw_flow_animation(self, painter: QPainter, path: QPainterPath, color: QColor) -> None:
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        # –ü—Ä–æ—Å—Ç—ã–µ –¥–≤–∏–∂—É—â–∏–µ—Å—è —Ç–æ—á–∫–∏
        dot_count = 3
        path_length = path.length()
        
        for i in range(dot_count):
            # –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–≤–∏–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∑–∂–µ)
            position = (i / dot_count) % 1.0
            point = path.pointAtPercent(position)
            
            # –†–∏—Å—É–µ–º —Å–≤–µ—Ç—è—â—É—é—Å—è —Ç–æ—á–∫—É
            dot_color = QColor(color)
            dot_color.setAlpha(180)
            
            painter.setPen(QPen(dot_color, 6))
            painter.setBrush(QBrush(dot_color))
            painter.drawEllipse(point, 2, 2)
            
    def hoverEnterEvent(self, event: QHoverEvent) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π hover —ç—Ñ—Ñ–µ–∫—Ç."""
        self.is_hovered = True
        self.update()
        super().hoverEnterEvent(event)
        
    def hoverLeaveEvent(self, event: QHoverEvent) -> None:
        """–£–±–∏—Ä–∞–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç."""
        self.is_hovered = False
        self.update()
        super().hoverLeaveEvent(event)
        
    def mousePressEvent(self, event: QMouseEvent) -> None:
        """Handle mouse press event."""
        if event.button() == Qt.RightButton:
            # Show context menu for deletion
            self.editor_view.show_connection_context_menu(self, event.screenPos())
        super().mousePressEvent(event) 

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π PinGraphicsItem –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class PinGraphicsItem(ModernPinGraphicsItem):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º PinGraphicsItem - –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ."""
    
    def __init__(self, pin: Pin, parent_node: NodeGraphicsItem, is_output: bool):
        super().__init__(pin, parent_node, is_output)
        
    def create_label(self) -> None:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥."""
        self.create_modern_label()
        
    def set_brush_color(self) -> None:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Ü–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
        pass
        
    def mousePressEvent(self, event: QMouseEvent) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        if event.button() == Qt.MouseButton.LeftButton:
            # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤—ã–±–æ—Ä–∞ –ø–∏–Ω–∞ –¥–ª—è PropertiesViewModel
            self.parent_node.editor_view.pin_selected.emit(self.pin_id)
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ editor_view
            self.parent_node.editor_view.start_connection_creation(self)
        super().mousePressEvent(event) 