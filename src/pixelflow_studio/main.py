#!/usr/bin/env python3
"""
Main entry point for PixelFlow Studio.
"""

import argparse
import sys
from pathlib import Path

from loguru import logger

from .core.application import Application
from .core.universal_logger import setup_universal_logging


def setup_logging(verbose: bool = False) -> None:
    """Setup logging configuration."""
    logger.remove()
    
    log_level = "DEBUG" if verbose else "INFO"
    log_format = (
        "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
        "<level>{level: <8}</level> | "
        "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - "
        "<level>{message}</level>"
    )
    
    logger.add(sys.stderr, format=log_format, level=log_level)


def auto_test_functionality(app) -> bool:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞."""
    logger.info("üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò...")
    
    errors = []
    
    try:
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã
        logger.info("–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ SolidColorNode...")
        solid_node = app.create_node("SolidColorNode")
        if solid_node:
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            errors.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–¥—É")
    except Exception as e:
        errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥—ã: {e}")
    
    try:
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä–∞—Ñ
        logger.info("–¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä–∞—Ñ...")
        app.graph.add_node(solid_node)
        if solid_node.id in [n.id for n in app.graph.nodes]:
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä–∞—Ñ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            errors.append("‚ùå –ù–æ–¥–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∞—Å—å –≤ –≥—Ä–∞—Ñ")
    except Exception as e:
        errors.append(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ: {e}")
    
    try:
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏–Ω–æ–≤
        logger.info("–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–æ–≤...")
        input_pins = list(solid_node.input_pins.values())
        output_pins = list(solid_node.output_pins.values())
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–∏–Ω–æ–≤: –≤—Ö–æ–¥–Ω—ã—Ö={len(input_pins)}, –≤—ã—Ö–æ–¥–Ω—ã—Ö={len(output_pins)}")
        if output_pins:
            logger.info("‚úÖ –ü–∏–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            errors.append("‚ùå –ù–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∏–Ω–æ–≤")
    except Exception as e:
        errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–æ–≤: {e}")
    
    # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ - –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–¥—ã –≤ —Ä–∞–±–æ—á–µ–º –≥—Ä–∞—Ñ–µ
    try:
        if solid_node and solid_node.id in [n.id for n in app.graph.nodes]:
            app.graph.remove_node(solid_node)
            logger.info("üßπ –¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–¥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥—Ä–∞—Ñ–∞")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–¥—É: {e}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if errors:
        logger.error("üö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for error in errors:
            logger.error(f"  {error}")
        return False
    else:
        logger.info("‚úÖ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True


def main() -> int:
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="PixelFlow Studio - Professional Node-Based Image Processing"
    )
    parser.add_argument(
        "--headless",
        action="store_true",
        help="Run in headless mode (no GUI)"
    )
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Enable verbose logging"
    )
    parser.add_argument(
        "--no-auto-test",
        action="store_true",
        help="Skip automatic functionality testing"
    )
    parser.add_argument(
        "--version",
        action="version",
        version="PixelFlow Studio 1.0.0"
    )
    
    args = parser.parse_args()
    setup_logging(args.verbose)
    
    app = Application()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–æ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    universal_logger = setup_universal_logging(app)
    universal_logger.log_system_state("application_started", {
        "args": vars(args),
        "headless": args.headless,
        "verbose": args.verbose
    })
    
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        if not args.no_auto_test:
            universal_logger.log_system_state("auto_test_started", {})
            auto_test_functionality(app)
            universal_logger.log_system_state("auto_test_completed", {})
        
        if args.headless:
            logger.info("Starting PixelFlow Studio in headless mode")
            app.run_headless()
            return 0
        else:
            logger.info("Starting PixelFlow Studio with GUI")
            return app.run_gui()
    
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
        return 0
    except Exception as e:
        logger.error(f"Application failed: {e}")
        import traceback
        logger.error(f"Full traceback:\n{traceback.format_exc()}")
        return 1
    finally:
        app.shutdown()


if __name__ == "__main__":
    sys.exit(main()) 