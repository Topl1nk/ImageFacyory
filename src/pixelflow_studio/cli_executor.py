#!/usr/bin/env python3
"""
CLI EXECUTOR - –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ GUI
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç—ã PixelFlow Studio –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
"""

import asyncio
import json
import os
import sys
import time
from pathlib import Path
from typing import Optional
import argparse

from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "src"))

from pixelflow_studio.core.application import Application
from pixelflow_studio.core.types import ExecutionContext


class CLIExecutor:
    """CLI –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ GUI."""
    
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        self.app = None
        self.execution_start_time = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if verbose:
            logger.remove()
            logger.add(sys.stdout, level="INFO", 
                      format="<green>{time:HH:mm:ss}</green> | <level>{level:<8}</level> | {message}")
        else:
            logger.remove()
            logger.add(sys.stdout, level="WARNING",
                      format="<level>{level}</level> | {message}")
    
    def log_info(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if self.verbose:
            logger.info(message)
    
    def log_error(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É."""
        logger.error(message)
    
    def log_success(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—Ö."""
        logger.success(message)
    
    async def load_project(self, project_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            self.log_info(f"üìÇ Loading project: {project_path}")
            
            if not os.path.exists(project_path):
                self.log_error(f"Project file not found: {project_path}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ GUI
            self.app = Application()
            self.log_info("üîß Application initialized")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            with open(project_path, 'r', encoding='utf-8') as f:
                project_data = json.load(f)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞—Ñ
            self.app.graph.from_dict(project_data, self.app.node_registry)
            
            nodes_count = len(self.app.graph.nodes)
            connections_count = len(self.app.graph._connections)
            
            self.log_info(f"üìä Project loaded: {nodes_count} nodes, {connections_count} connections")
            
            if nodes_count == 0:
                self.log_error("‚ùå Project contains no nodes to execute")
                return False
            
            return True
            
        except json.JSONDecodeError as e:
            self.log_error(f"Invalid JSON in project file: {e}")
            return False
        except Exception as e:
            self.log_error(f"Failed to load project: {e}")
            return False
    
    async def execute_project(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç."""
        if not self.app:
            self.log_error("No project loaded")
            return False
        
        try:
            self.log_info("üöÄ Starting project execution...")
            self.execution_start_time = time.time()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ
            await self.app.execute_graph_async()
            
            execution_time = time.time() - self.execution_start_time
            self.log_success(f"‚úÖ Project executed successfully in {execution_time:.3f} seconds")
            
            return True
            
        except Exception as e:
            execution_time = time.time() - self.execution_start_time if self.execution_start_time else 0
            self.log_error(f"‚ùå Project execution failed after {execution_time:.3f}s: {e}")
            return False
    
    async def run_project(self, project_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç."""
        success = await self.load_project(project_path)
        if not success:
            return False
        
        return await self.execute_project()
    
    def analyze_project(self, project_path: str) -> bool:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        try:
            self.log_info(f"üîç Analyzing project: {project_path}")
            
            if not os.path.exists(project_path):
                self.log_error(f"Project file not found: {project_path}")
                return False
            
            with open(project_path, 'r', encoding='utf-8') as f:
                project_data = json.load(f)
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            version = project_data.get('version', 'unknown')
            nodes = project_data.get('nodes', [])
            connections = project_data.get('connections', [])
            
            print(f"üìã PROJECT ANALYSIS")
            print(f"   Version: {version}")
            print(f"   Nodes: {len(nodes)}")
            print(f"   Connections: {len(connections)}")
            print()
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–æ–¥
            if nodes:
                print("üîß NODES:")
                for i, node in enumerate(nodes, 1):
                    node_type = node.get('class_name', 'Unknown')
                    node_name = node.get('name', 'Unnamed')
                    position = node.get('position', {})
                    x, y = position.get('x', 0), position.get('y', 0)
                    print(f"   {i}. {node_type}: '{node_name}' at ({x}, {y})")
                print()
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if connections:
                print("üîó CONNECTIONS:")
                for i, conn in enumerate(connections, 1):
                    output_pin = conn.get('output_pin_name', 'unknown')
                    input_pin = conn.get('input_pin_name', 'unknown')
                    print(f"   {i}. {output_pin} ‚Üí {input_pin}")
                print()
            
            self.log_success("‚úÖ Project analysis completed")
            return True
            
        except Exception as e:
            self.log_error(f"Failed to analyze project: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="PixelFlow Studio CLI Executor",
        epilog="Examples:\n"
               "  python cli_executor.py --execute project.pfp\n"
               "  python cli_executor.py --analyze project.pfp --verbose\n"
               "  python cli_executor.py --execute project.pfp --verbose",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('project', nargs='?', help='Project file (.pfp) to process')
    parser.add_argument('--execute', '-e', metavar='PROJECT', help='Execute the specified project')
    parser.add_argument('--analyze', '-a', metavar='PROJECT', help='Analyze the specified project')
    parser.add_argument('--verbose', '-v', action='store_true', help='Verbose output')
    parser.add_argument('--version', action='version', version='PixelFlow Studio CLI 1.0.0')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å
    project_file = args.execute or args.analyze or args.project
    
    if not project_file:
        parser.print_help()
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    executor = CLIExecutor(verbose=args.verbose)
    
    try:
        if args.analyze:
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
            success = executor.analyze_project(args.analyze)
            return 0 if success else 1
        
        else:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            success = asyncio.run(executor.run_project(project_file))
            return 0 if success else 1
            
    except KeyboardInterrupt:
        executor.log_error("‚ùå Execution interrupted by user")
        return 130
    except Exception as e:
        executor.log_error(f"‚ùå Unexpected error: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())