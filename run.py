#!/usr/bin/env python3
"""
–ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –§–ê–ô–õ –î–õ–Ø –ó–ê–ü–£–°–ö–ê PIXELFLOW STUDIO
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

import subprocess
import sys
import importlib.util
from pathlib import Path

def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    required_packages = {
        'PySide6': 'PySide6',
        'PIL': 'Pillow',
        'numpy': 'numpy',
        'loguru': 'loguru'
    }
    
    missing = []
    for module_name, package_name in required_packages.items():
        if importlib.util.find_spec(module_name) is None:
            missing.append(package_name)
    
    if missing:
        print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
        for package in missing:
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", package], 
                             check=True, capture_output=True)
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
                return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    import argparse
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="PixelFlow Studio - Node-based Image Processing",
        epilog="Examples:\n"
               "  python run.py                           # Start GUI\n"
               "  python run.py -pr project.pfp -ex       # Execute project without GUI\n"
               "  python run.py -pr project.pfp -an       # Analyze project structure\n"
               "  python run.py -pr project.pfp -ex -v    # Execute with verbose output\n"
               "  python run.py --project project.pfp --execute  # Long form\n"
               "  python run.py --help                    # Show help",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
    parser.add_argument('-pr', '--project', metavar='FILE', 
                       help='Project file (.pfp) to process')
    
    # –î–µ–π—Å—Ç–≤–∏—è
    action_group = parser.add_mutually_exclusive_group()
    action_group.add_argument('-ex', '--execute', action='store_true',
                             help='Execute the project')
    action_group.add_argument('-an', '--analyze', action='store_true',
                             help='Analyze project structure')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Verbose output (for CLI mode)')
    
    # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    parser.add_argument('--old-execute', metavar='PROJECT', dest='old_execute',
                       help=argparse.SUPPRESS)  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑ help
    parser.add_argument('--old-analyze', metavar='PROJECT', dest='old_analyze', 
                       help=argparse.SUPPRESS)  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑ help
    
    args = parser.parse_args()
    
    print("üöÄ PIXELFLOW STUDIO LAUNCHER")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_and_install_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
        return 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    cli_mode = False
    project_file = None
    action = None
    
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: -pr project.pfp -ex/-an
    if args.project:
        project_file = args.project
        if args.execute:
            action = "execute"
            cli_mode = True
        elif args.analyze:
            action = "analyze"
            cli_mode = True
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: -ex (execute) –∏–ª–∏ -an (analyze)")
            return 1
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    elif args.old_execute:
        project_file = args.old_execute
        action = "execute"
        cli_mode = True
    elif args.old_analyze:
        project_file = args.old_analyze
        action = "analyze"
        cli_mode = True
    
    # CLI —Ä–µ–∂–∏–º
    if cli_mode:
        cli_file = Path("src/pixelflow_studio/cli_executor.py")
        if not cli_file.exists():
            print(f"‚ùå CLI executor not found: {cli_file}")
            return 1
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å CLI –∫–æ–º–∞–Ω–¥—É
        cli_args = [sys.executable, str(cli_file)]
        
        if action == "execute":
            cli_args.extend(["--execute", project_file])
        elif action == "analyze":
            cli_args.extend(["--analyze", project_file])
        
        if args.verbose:
            cli_args.append("--verbose")
        
        print("üñ•Ô∏è  CLI MODE")
        print(f"üìÅ Project: {project_file}")
        print(f"‚ö° Action: {action}")
        print("-" * 40)
        
        try:
            result = subprocess.run(cli_args, cwd=Path.cwd())
            return result.returncode
        except Exception as e:
            print(f"‚ùå CLI execution error: {e}")
            return 1
    
    # GUI —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    main_file = Path("src/pixelflow_studio/main.py")
    if not main_file.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª: {main_file}")
        return 1
    
    print("‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    print("üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
    print("üñ•Ô∏è  GUI MODE")
    print("-" * 40)
    
    # –ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        result = subprocess.run([
            sys.executable, "-m", "src.pixelflow_studio.main"
        ], cwd=Path.cwd())
        return result.returncode
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 